//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/SpaceShipControlActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SpaceShipControlActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SpaceShipControlActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SpaceShipControlActions"",
    ""maps"": [
        {
            ""name"": ""SpaceShipMap"",
            ""id"": ""18a0c73b-bf5a-4623-a65d-a3d7c4759f77"",
            ""actions"": [
                {
                    ""name"": ""PlayerMovement"",
                    ""type"": ""Value"",
                    ""id"": ""f3319670-7bda-4d7d-a7f3-5d4b6b62b559"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlayerShoot"",
                    ""type"": ""Button"",
                    ""id"": ""295a8a93-d268-46b1-801a-b8a9af3cdeea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""3c05ad8c-33ac-4d51-8b6c-3326c77eba73"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""34c9aa2b-8334-4959-bda3-0102468fbbc6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b9668477-79f6-4e5c-a20f-949cd1af9f22"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dc6d6468-3d99-4c0c-8a7d-7f113883c13b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3151945e-70d8-4336-a270-0c437931f602"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""4f0b0685-c40a-4455-a74b-a16dd40f8aff"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9d1e44e4-4b38-48e4-81bb-98296613085f"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""aedaa017-ae21-4f2f-b528-baa7d4f56811"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2381ec1c-6242-44c3-8de2-dbc2611be660"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""66c0c3b8-37b9-4f65-866d-eaa302c5db6e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4db6bda2-5da3-4024-a36c-6f159079aac7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SpaceShipMap
        m_SpaceShipMap = asset.FindActionMap("SpaceShipMap", throwIfNotFound: true);
        m_SpaceShipMap_PlayerMovement = m_SpaceShipMap.FindAction("PlayerMovement", throwIfNotFound: true);
        m_SpaceShipMap_PlayerShoot = m_SpaceShipMap.FindAction("PlayerShoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SpaceShipMap
    private readonly InputActionMap m_SpaceShipMap;
    private List<ISpaceShipMapActions> m_SpaceShipMapActionsCallbackInterfaces = new List<ISpaceShipMapActions>();
    private readonly InputAction m_SpaceShipMap_PlayerMovement;
    private readonly InputAction m_SpaceShipMap_PlayerShoot;
    public struct SpaceShipMapActions
    {
        private @SpaceShipControlActions m_Wrapper;
        public SpaceShipMapActions(@SpaceShipControlActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayerMovement => m_Wrapper.m_SpaceShipMap_PlayerMovement;
        public InputAction @PlayerShoot => m_Wrapper.m_SpaceShipMap_PlayerShoot;
        public InputActionMap Get() { return m_Wrapper.m_SpaceShipMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpaceShipMapActions set) { return set.Get(); }
        public void AddCallbacks(ISpaceShipMapActions instance)
        {
            if (instance == null || m_Wrapper.m_SpaceShipMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpaceShipMapActionsCallbackInterfaces.Add(instance);
            @PlayerMovement.started += instance.OnPlayerMovement;
            @PlayerMovement.performed += instance.OnPlayerMovement;
            @PlayerMovement.canceled += instance.OnPlayerMovement;
            @PlayerShoot.started += instance.OnPlayerShoot;
            @PlayerShoot.performed += instance.OnPlayerShoot;
            @PlayerShoot.canceled += instance.OnPlayerShoot;
        }

        private void UnregisterCallbacks(ISpaceShipMapActions instance)
        {
            @PlayerMovement.started -= instance.OnPlayerMovement;
            @PlayerMovement.performed -= instance.OnPlayerMovement;
            @PlayerMovement.canceled -= instance.OnPlayerMovement;
            @PlayerShoot.started -= instance.OnPlayerShoot;
            @PlayerShoot.performed -= instance.OnPlayerShoot;
            @PlayerShoot.canceled -= instance.OnPlayerShoot;
        }

        public void RemoveCallbacks(ISpaceShipMapActions instance)
        {
            if (m_Wrapper.m_SpaceShipMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpaceShipMapActions instance)
        {
            foreach (var item in m_Wrapper.m_SpaceShipMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpaceShipMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpaceShipMapActions @SpaceShipMap => new SpaceShipMapActions(this);
    public interface ISpaceShipMapActions
    {
        void OnPlayerMovement(InputAction.CallbackContext context);
        void OnPlayerShoot(InputAction.CallbackContext context);
    }
}
